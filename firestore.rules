/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid development by focusing on strict authentication and authorization.
 * Schema validation is relaxed to allow for flexible data modeling during the prototyping phase.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores seller profile information. The `userId` path parameter must match the authenticated user's UID.
 * - `/products/{productId}`: Stores all products for all stores.
 * - `/orders/{orderId}`: Stores all orders for all stores.
 * - `/users/{userId}/categories/{categoryId}`: Stores product categories created by a specific user.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to prevent information disclosure.
 * - All write operations are protected by authentication checks.
 * - Ownership is enforced for user-specific data.
 *
 * Denormalization for Authorization:
 *  - For `products` and `orders`, a `sellerId` or similar field would enable more granular authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a seller to manage their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (update) - User with UID 'user_abc' can update their profile at /users/user_abc.
     * @allow (delete) - User with UID 'user_abc' can delete their profile at /users/user_abc.
     * @deny  (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny  (update) - User with UID 'user_xyz' cannot update the profile at /users/user_abc.
     * @deny  (delete) - User with UID 'user_xyz' cannot delete the profile at /users/user_abc.
     * @deny (list) Listing all users is not permitted
     * @principle Enforces user-ownership for profile management.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

      /**
       * @description Allows any user to read products, but restricts creation, updating, and deletion.
       * @path /products/{productId}
       * @allow (get, list) - Any authenticated user can read any product.
       * @deny (create, update, delete) - No one can create, update, or delete products.
       * @principle  Public read, no writes allowed
       */
      match /products/{productId} {
        allow get: if true;
        allow list: if true;
        allow create, update, delete: if false;
      }

    /**
     * @description Allows any user to read orders, but restricts creation, updating, and deletion.
     * @path /orders/{orderId}
     * @allow (get, list) - Any authenticated user can read any order.
     * @deny (create, update, delete) - No one can create, update, or delete orders.
     * @principle  Public read, no writes allowed
     */
    match /orders/{orderId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a seller to manage their own product categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) - User with UID 'user_abc' can create a category under /users/user_abc/categories/{categoryId}.
     * @allow (update) - User with UID 'user_abc' can update a category under /users/user_abc/categories/{categoryId}.
     * @allow (delete) - User with UID 'user_abc' can delete a category under /users/user_abc/categories/{categoryId}.
     * @deny  (create) - User with UID 'user_xyz' cannot create a category under /users/user_abc/categories/{categoryId}.
     * @deny  (update) - User with UID 'user_xyz' cannot update a category under /users/user_abc/categories/{categoryId}.
     * @deny  (delete) - User with UID 'user_xyz' cannot delete a category under /users/user_abc/categories/{categoryId}.
     * @principle Enforces user-ownership for category management.
     */
    match /users/{userId}/categories/{categoryId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}
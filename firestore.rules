/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user identity and explicit ownership.
 * It errs on the side of caution, restricting access unless explicitly granted.
 * Data validation is relaxed to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores seller profiles, with the document ID matching the Firebase Auth UID.
 * - /products/{productId}: Stores product information for all stores.
 * - /orders/{orderId}: Stores order information for all stores.
 * - /users/{userId}/categories/{categoryId}: Stores categories created by specific users, nested under their user ID.
 *
 * Key Security Decisions:
 * - Users can only create their own profile and only access their own profile data (ownership model).
 * - Listing of users is disallowed for privacy.
 * - Public read access is enabled for products and orders to allow listing products and orders.
 * - All write operations require authentication (no anonymous writes).
 * - Data validation is minimal, focusing on ownership and relationship integrity.
 *
 * Denormalization for Authorization:
 *  - Products and Orders do not contain an explicit "sellerId" or "customerId" field.
 *  Rules do not currently enforce ownership of these resources, as there is no way to authorize this.
 *  The data model should be updated to include an explicit "sellerId" or "customerId" field for proper authorization.
 *
 * Structural Segregation:
 * - Seller-specific categories are stored under the /users/{userId} collection, ensuring private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for documents in the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - A user with UID 'user123' can create their own profile document with ID 'user123'.
     * @allow (get, update, delete) - A user with UID 'user123' can get, update, and delete their own profile document with ID 'user123'.
     * @deny (create) - A user with UID 'user123' cannot create a profile document with ID 'user456'.
     * @deny (get, update, delete) - A user with UID 'user123' cannot get, update, or delete a profile document with ID 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for documents in the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product details.
     * @deny (create, update, delete) - Only the product owner (seller) should be able to modify product details.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for documents in the /orders/{orderId} collection.
     * @path /orders/{orderId}
     * @allow (get, list) - Any user can read order details.
     * @deny (create, update, delete) - Only the order owner (customer or seller) should be able to modify order details.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for documents in the /users/{userId}/categories/{categoryId} collection.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create, get, update, delete) - A user can manage their own categories.
     * @deny (create, get, update, delete) - A user cannot manage categories belonging to another user.
     * @principle Enforces document ownership for category management.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}
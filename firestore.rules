/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for seller data,
 *  while allowing public read access to subscription plans. Customer data is segregated and access
 *  is based on customer ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores seller profiles, where userId matches the Firebase Auth UID.
 * - /users/{userId}/stores/{storeId}: Stores owned by the seller. The storeId is unique.
 * - /stores/{storeId}/products/{productId}: Products belonging to a specific store.
 * - /stores/{storeId}/orders/{orderId}: Orders placed at the store.
 * - /stores/{storeId}/orders/{orderId}/order_items/{orderItemId}: Order items for an order.
 * - /subscription_plans/{subscriptionPlanId}: Publicly readable subscription plan details.
 * - /users/{userId}/seller_subscriptions/{sellerSubscriptionId}: Seller subscription details.
 * - /customers/{customerId}: Customer profiles.  customerId is not related to userId.
 *
 * Key Security Decisions:
 * - Sellers can only access their own user data and their associated stores and subscriptions.
 * - Products, Orders, and OrderItems are secured by the store's owner.
 * - Subscription plans are publicly readable but not writable.
 * - Customers can only access their own customer data.
 * - Listing of `users` or `customers` is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Store documents under /users/{userId}/stores/{storeId} denormalize the sellerId
 * - Product documents under /stores/{storeId}/products/{productId} denormalize the storeId.
 * - Order documents under /stores/{storeId}/orders/{orderId} denormalize the customerId and storeId.
 * - OrderItem documents under /stores/{storeId}/orders/{orderId}/order_items/{orderItemId} inherit the storeId from the order.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects seller profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' creates their profile at /users/user_abc with matching data.id == 'user_abc'.
     * @deny (create) User with UID 'user_abc' tries to create a profile at /users/user_xyz.
     * @allow (get, update, delete) User with UID 'user_abc' reads/updates/deletes their profile at /users/user_abc.
     * @deny (get, update, delete) User with UID 'user_abc' tries to read/update/delete the profile at /users/user_xyz.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verified user
      function isSignedIn() {
        return request.auth != null;
      }

      // Verifies the user ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //Verifies the user ID for update and delete requests
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects stores owned by a seller. Only the seller can manage their stores.
     * @path /users/{userId}/stores/{storeId}
     * @allow (create) User 'user_abc' creates a store under /users/user_abc/stores/store1.
     * @deny (create) User 'user_abc' tries to create a store under /users/user_xyz/stores/store1.
     * @allow (get, list, update, delete) User 'user_abc' manages their store at /users/user_abc/stores/store1.
     * @deny (get, list, update, delete) User 'user_abc' tries to manage a store at /users/user_xyz/stores/store1.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId}/stores/{storeId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Verifies the user ID
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        //Verifies the user ID for update and delete requests
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects products belonging to a store.  Anyone can read a product, but only the store owner can create, update, or delete.
     * @path /stores/{storeId}/products/{productId}
     * @allow (get, list) Any user can read/list products in a store.
     * @allow (create) User 'user_abc' (owner of store 'store1') creates a product in /stores/store1/products/product1, with data.storeId == 'store1'.
     * @deny (create) User 'user_abc' tries to create a product in /stores/store2/products/product1.
     * @allow (update, delete) User 'user_abc' (owner of store 'store1') updates/deletes a product in /stores/store1/products/product1.
     * @deny (update, delete) User 'user_abc' tries to update/delete a product in /stores/store2/products/product1.
     * @principle Public read access with owner-only writes, enforced via denormalized storeId.
     */
    match /stores/{storeId}/products/{productId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(storeId) {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(storeId)).data.size() == 1;
        }

        //Verifies the store ID and that resource exists
        function isExistingOwner(storeId) {
          return isOwner(storeId) && resource != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && isOwner(storeId) && request.resource.data.storeId == storeId;
        allow update: if isExistingOwner(storeId);
        allow delete: if isExistingOwner(storeId);
    }

     /**
      * @description Protects orders placed in a store. Anyone can read an order, but only the store owner can create, update, or delete.
      * @path /stores/{storeId}/orders/{orderId}
      * @allow (get, list) Any user can read/list orders in a store.
      * @allow (create) User 'user_abc' (owner of store 'store1') creates an order in /stores/store1/orders/order1, with data.storeId == 'store1'.
      * @deny (create) User 'user_abc' tries to create an order in /stores/store2/orders/order1.
      * @allow (update, delete) User 'user_abc' (owner of store 'store1') updates/deletes an order in /stores/store1/orders/order1.
      * @deny (update, delete) User 'user_abc' tries to update/delete an order in /stores/store2/orders/order1.
      * @principle Public read access with owner-only writes, enforced via denormalized storeId.
      */
    match /stores/{storeId}/orders/{orderId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(storeId) {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(storeId)).data.size() == 1;
        }

        //Verifies the store ID and that resource exists
        function isExistingOwner(storeId) {
          return isOwner(storeId) && resource != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && isOwner(storeId) && request.resource.data.storeId == storeId;
        allow update: if isExistingOwner(storeId);
        allow delete: if isExistingOwner(storeId);
    }

    /**
     * @description Protects order items within an order.  Anyone can read an order item, but only the store owner can create, update, or delete.
     * @path /stores/{storeId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (get, list) Any user can read/list order items in a store's order.
     * @allow (create) User 'user_abc' (owner of store 'store1') creates an order item in /stores/store1/orders/order1/order_items/item1.
     * @deny (create) User 'user_abc' tries to create an order item in /stores/store2/orders/order1/order_items/item1.
     * @allow (update, delete) User 'user_abc' (owner of store 'store1') updates/deletes an order item in /stores/store1/orders/order1/order_items/item1.
     * @deny (update, delete) User 'user_abc' tries to update/delete an order item in /stores/store2/orders/order1/order_items/item1.
     * @principle Public read access with owner-only writes, enforced via storeId inherited from parent order.
     */
    match /stores/{storeId}/orders/{orderId}/order_items/{orderItemId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(storeId) {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)/stores/$(storeId)).data.size() == 1;
        }

        //Verifies the store ID and that resource exists
        function isExistingOwner(storeId) {
          return isOwner(storeId) && resource != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && isOwner(storeId);
        allow update: if isExistingOwner(storeId);
        allow delete: if isExistingOwner(storeId);
    }

    /**
     * @description Allows public read access to subscription plans.
     * @path /subscription_plans/{subscriptionPlanId}
     * @allow (get, list) Any user can read/list subscription plans.
     * @deny (create, update, delete) No one can create/update/delete subscription plans.
     * @principle Public read-only access for globally available data.
     */
    match /subscription_plans/{subscriptionPlanId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Protects seller subscription data. Only the seller can manage their subscription.
     * @path /users/{userId}/seller_subscriptions/{sellerSubscriptionId}
     * @allow (create) User 'user_abc' creates a subscription under /users/user_abc/seller_subscriptions/sub1.
     * @deny (create) User 'user_abc' tries to create a subscription under /users/user_xyz/seller_subscriptions/sub1.
     * @allow (get, list, update, delete) User 'user_abc' manages their subscription at /users/user_abc/seller_subscriptions/sub1.
     * @deny (get, list, update, delete) User 'user_abc' tries to manage a subscription at /users/user_xyz/seller_subscriptions/sub1.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId}/seller_subscriptions/{sellerSubscriptionId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Verifies the user ID
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        //Verifies the user ID and that resource exists
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects customer profiles. Only the customer can read/write their own profile.
     * @path /customers/{customerId}
     * @allow (create) Customer with ID 'customer_abc' creates their profile at /customers/customer_abc.
     * @deny (create) Customer with ID 'customer_abc' tries to create a profile at /customers/customer_xyz.
     * @allow (get, update, delete) Customer with ID 'customer_abc' reads/updates/deletes their profile at /customers/customer_abc.
     * @deny (get, update, delete) Customer with ID 'customer_abc' tries to read/update/delete the profile at /customers/customer_xyz.
     */
    match /customers/{customerId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(customerId) {
            return request.auth.uid == customerId;
        }

        //Verifies the user ID and that resource exists
        function isExistingOwner(customerId) {
          return isOwner(customerId) && resource != null;
        }

        allow get: if isOwner(customerId);
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.id == customerId;
        allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id;
        allow delete: if isExistingOwner(customerId);
    }
  }
}